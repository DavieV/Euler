/*
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, 
for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
*/

#include <iostream>
#include <cmath>

#define MAX 10000

long long pent(int);
bool is_pent(long long);
long long dif(long long, long long);

int main(void) {
    /*
    * This loop determines the minimum difference between two pentagonal numbers whose
    * sum and difference are also pentagonal
    */
    long long min;
    long long d;
    bool found = false;
    for (int i = 1; i < MAX; ++i) {
        for (int j = i+1; i + j < MAX; ++j) {
            if (is_pent(pent(i) + pent(j))) {
                d = dif(pent(i), pent(j));
                if (is_pent(d)) {
                    if (!found) {
                        min = d;
                    } else if (d < min) {
                        min = d;
                    }  
                }
            }
        }
    }
    std::cout << min << std::endl;
    return 0;
}

// determines whether or not a number is pentagonal
bool is_pent(long long n) {
    if (n == 0)
        return false;
    long long x = static_cast<long long>((1 + sqrt(24 * n + 1)) / 6);
    return n == pent(x);
}

// returns the nth pentagonal number
long long pent(int n) {
    return n * ( 3 * n - 1) / 2;
}

// returns the magnitude of a difference between x and y
long long dif(long long x, long long y) {
    long long tmp = x - y;
    if (tmp < 0)
        return -1 * tmp;
    return tmp;
}
